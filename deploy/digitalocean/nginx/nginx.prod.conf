events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # SSL configuration (will be uncommented after certbot setup)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;
    # ssl_prefer_server_ciphers on;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    
    # Upstream definitions
    upstream appflowy_cloud {
        server appflowy_cloud:8000;
        keepalive 32;
    }
    
    upstream appflowy_web {
        server appflowy_web:3000;
        keepalive 32;
    }
    
    upstream admin_frontend {
        server admin_frontend:3000;
        keepalive 32;
    }
    
    upstream gotrue {
        server gotrue:9999;
        keepalive 32;
    }
    
    upstream ccf_backend {
        server ccf_backend:3000;
        keepalive 32;
    }
    
    upstream ccf_frontend {
        server ccf_frontend:3000;
        keepalive 32;
    }
    
    # HTTP to HTTPS redirect (uncomment after SSL setup)
    # server {
    #     listen 80;
    #     server_name ${DO_TEMP_DOMAIN};
    #     
    #     location /.well-known/acme-challenge/ {
    #         root /var/www/certbot;
    #     }
    #     
    #     location / {
    #         return 301 https://$server_name$request_uri;
    #     }
    # }
    
    # Main server block
    server {
        listen 80;
        # listen 443 ssl http2;  # Uncomment after SSL setup
        server_name ${DO_TEMP_DOMAIN};
        
        # SSL certificates (uncomment after certbot setup)
        # ssl_certificate /etc/letsencrypt/live/${DO_TEMP_DOMAIN}/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/${DO_TEMP_DOMAIN}/privkey.pem;
        
        # Client body size for file uploads
        client_max_body_size 100M;
        client_body_buffer_size 128k;
        
        # Timeouts
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Common proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Root - serve AppFlowy web
        location / {
            proxy_pass http://appflowy_web;
            proxy_cache_bypass $http_upgrade;
        }
        
        # AppFlowy API
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://appflowy_cloud;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
        
        # WebSocket endpoint
        location /ws/ {
            proxy_pass http://appflowy_cloud;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }
        
        # Admin console
        location /console {
            proxy_pass http://admin_frontend;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Authentication service
        location /gotrue/ {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://gotrue/;
        }
        
        # CCF-Planner API
        location /ccf/api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://ccf_backend/api/;
            
            # CORS for CCF API
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
        
        # CCF-Planner Frontend
        location /planner {
            proxy_pass http://ccf_frontend;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Certbot webroot (for SSL certificate renewal)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Static file caching
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        # Deny access to sensitive files
        location ~ /\. {
            deny all;
        }
        
        location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md) {
            return 404;
        }
    }
    
    # Status page (only accessible from localhost)
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}