version: '3.9'

services:
  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: ccf-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./certs:/etc/letsencrypt:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - ccf-network

  # API Backend Service
  api:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: ccf-api
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - BIBLE_API_KEY=${BIBLE_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - redis
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ccf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_FIREBASE_CONFIG=${REACT_APP_FIREBASE_CONFIG}
        - REACT_APP_BIBLE_API_KEY=${REACT_APP_BIBLE_API_KEY}
    container_name: ccf-frontend
    environment:
      - NODE_ENV=production
      - PORT=3000
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - ccf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ccf-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - ccf-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AppFlowy Backend (if running locally instead of using cloud)
  appflowy:
    image: appflowy/appflowy-cloud:latest
    container_name: ccf-appflowy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    depends_on:
      - redis
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - ccf-network

  # Backup Service (runs daily)
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: ccf-backup
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - ccf-network

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ccf-prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - ccf-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ccf-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - ccf-network
    profiles:
      - monitoring

  # Development Database (for local development only)
  postgres:
    image: postgres:15-alpine
    container_name: ccf-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sermon_planner}
      - POSTGRES_USER=${POSTGRES_USER:-ccf_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    restart: unless-stopped
    networks:
      - ccf-network
    profiles:
      - development

  # pgAdmin for database management (development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ccf-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@capechristian.org}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - ccf-network
    profiles:
      - development

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ccf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16